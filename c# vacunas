using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;

// ------------------------------------------------------------
// Proyecto: Vacunación COVID — Operaciones de Teoría de Conjuntos
// Lenguaje: C# (.NET 8 Console)
// Requisitos cubiertos:
//  - Conjunto ficticio de 500 ciudadanos (Ciudadano 1..500)
//  - Conjunto ficticio de 75 vacunados con Pfizer
//  - Conjunto ficticio de 75 vacunados con AstraZeneca
//  - Listados usando operaciones de conjuntos:
//      * No vacunados: U \\ (Pfizer ∪ AstraZeneca)
//      * Ambas dosis (interpretación académica): Pfizer ∩ AstraZeneca
//      * Solo Pfizer: Pfizer \\ AstraZeneca
//      * Solo AstraZeneca: AstraZeneca \\ Pfizer
//  - Exportación a archivos CSV/TXT en carpeta ./output
//  - (Opcional) PDF: ver instrucciones en README del repositorio
// ------------------------------------------------------------

namespace VacunacionSetTheory
{
    class Program
    {
        static void Main()
        {
            // 1) Universo de ciudadanos U = {1..500}
            var universe = Enumerable.Range(1, 500).ToList();

            // 2) Semilla fija para reproducibilidad
            var rng = new Random(20250824);

            // 3) Conjuntos de vacunación (75 c/u, sin garantía de disjunción)
            var pfizer = TakeRandomDistinct(universe, 75, rng);
            var astra = TakeRandomDistinct(universe, 75, rng);

            // 4) Operaciones de teoría de conjuntos
            // U \ (P ∪ A)
            var union = new HashSet<int>(pfizer);
            union.UnionWith(astra);
            var noVacunados = new HashSet<int>(universe);
            noVacunados.ExceptWith(union);

            // P ∩ A  (interpretado como "ambas dosis" en un ejercicio académico)
            var ambasDosis = new HashSet<int>(pfizer);
            ambasDosis.IntersectWith(astra);

            // Solo Pfizer: P \ A
            var soloPfizer = new HashSet<int>(pfizer);
            soloPfizer.ExceptWith(astra);

            // Solo AstraZeneca: A \ P
            var soloAstra = new HashSet<int>(astra);
            soloAstra.ExceptWith(pfizer);

            // 5) Salida en consola
            Console.WriteLine("==== Resumen — Vacunación COVID (Datos Ficticios) ====");
            Console.WriteLine($"Total ciudadanos: {universe.Count}");
            Console.WriteLine($"Pfizer (|P|): {pfizer.Count}");
            Console.WriteLine($"AstraZeneca (|A|): {astra.Count}");
            Console.WriteLine($"No vacunados (|U - (P ∪ A)|): {noVacunados.Count}");
            Console.WriteLine($"Ambas dosis (|P ∩ A|): {ambasDosis.Count}");
            Console.WriteLine($"Solo Pfizer (|P - A|): {soloPfizer.Count}");
            Console.WriteLine($"Solo AstraZeneca (|A - P|): {soloAstra.Count}\n");

            // 6) Exportar archivos
            var outDir = Path.Combine(AppContext.BaseDirectory, "output");
            Directory.CreateDirectory(outDir);

            WriteList(Path.Combine(outDir, "pfizer.csv"), pfizer, header: "id,nombre,marca", marca: "Pfizer");
            WriteList(Path.Combine(outDir, "astrazeneca.csv"), astra, header: "id,nombre,marca", marca: "AstraZeneca");
            WriteList(Path.Combine(outDir, "no_vacunados.csv"), noVacunados, header: "id,nombre,estado", estado: "No vacunado");
            WriteList(Path.Combine(outDir, "ambas_dosis.csv"), ambasDosis, header: "id,nombre,detalle", detalle: "Intersección Pfizer & AstraZeneca");
            WriteList(Path.Combine(outDir, "solo_pfizer.csv"), soloPfizer, header: "id,nombre,detalle", detalle: "Solo Pfizer (P - A)");
            WriteList(Path.Combine(outDir, "solo_astrazeneca.csv"), soloAstra, header: "id,nombre,detalle", detalle: "Solo AstraZeneca (A - P)");

            WriteResumenTxt(outDir, universe.Count, pfizer.Count, astra.Count, noVacunados.Count, ambasDosis.Count, soloPfizer.Count, soloAstra.Count);

            Console.WriteLine($"Archivos exportados en: {outDir}");

            // 7) (Opcional) Generar PDF
            // Para habilitar PDF con QuestPDF:
            //  a) dotnet add package QuestPDF --version 2024.2.0
            //  b) Descomente la línea siguiente:
            //GeneratePdf(outDir, universe.Count, pfizer.Count, astra.Count, noVacunados.Count, ambasDosis.Count, soloPfizer.Count, soloAstra.Count);
        }

        // Selecciona k elementos únicos aleatorios de la lista fuente
        static HashSet<int> TakeRandomDistinct(List<int> source, int k, Random rng)
        {
            if (k > source.Count) throw new ArgumentException("k no puede ser mayor que el tamaño de la fuente");
            var result = new HashSet<int>();
            while (result.Count < k)
            {
                var idx = rng.Next(source.Count);
                result.Add(source[idx]);
            }
            return result;
        }

        static string NombreCiudadano(int id) => $"Ciudadano {id}";

        static void WriteList(string path,
                              IEnumerable<int> ids,
                              string header = "id,nombre",
                              string? marca = null,
                              string? estado = null,
                              string? detalle = null)
        {
            using var sw = new StreamWriter(path, false);
            sw.WriteLine(header);
            foreach (var id in ids.OrderBy(x => x))
            {
                var nombre = NombreCiudadano(id);
                if (marca != null)
                    sw.WriteLine($"{id},{nombre},{marca}");
                else if (estado != null)
                    sw.WriteLine($"{id},{nombre},{estado}");
                else if (detalle != null)
                    sw.WriteLine($"{id},{nombre},{detalle}");
                else
                    sw.WriteLine($"{id},{nombre}");
            }
        }

        static void WriteResumenTxt(string outDir,
                                    int total,
                                    int pCount,
                                    int aCount,
                                    int noVacCount,
                                    int ambasCount,
                                    int soloPCount,
                                    int soloACount)
        {
            var path = Path.Combine(outDir, "resumen.txt");
            using var sw = new StreamWriter(path, false);
            sw.WriteLine("Resumen — Vacunación COVID (Datos Ficticios)");
            sw.WriteLine(new string('-', 55));
            sw.WriteLine($"Total ciudadanos: {total}");
            sw.WriteLine($"Pfizer: {pCount}");
            sw.WriteLine($"AstraZeneca: {aCount}");
            sw.WriteLine($"No vacunados: {noVacCount}");
            sw.WriteLine($"Ambas dosis (P ∩ A): {ambasCount}");
            sw.WriteLine($"Solo Pfizer (P - A): {soloPCount}");
            sw.WriteLine($"Solo AstraZeneca (A - P): {soloACount}");
            sw.WriteLine();
            sw.WriteLine("Notas:");
            sw.WriteLine("- 'Ambas dosis' se interpreta como intersección entre conjuntos Pfizer y AstraZeneca (ejercicio académico de teoría de conjuntos).\n  Si su docente requiere dos dosis de la misma marca, agregue un tercer conjunto 'SegundaDosis' y use la intersección marca∩segunda.");
        }

        /*
        // Descomentar si decide generar PDF con QuestPDF (agregar paquete primero)
        static void GeneratePdf(string outDir,
                                int total,
                                int pCount,
                                int aCount,
                                int noVacCount,
                                int ambasCount,
                                int soloPCount,
                                int soloACount)
        {
            QuestPDF.Settings.License = QuestPDF.Infrastructure.LicenseType.Community;
            var path = Path.Combine(outDir, "reporte_vacunacion.pdf");

            QuestPDF.Fluent.Document.Create(container =>
            {
                container.Page(page =>
                {
                    page.Margin(40);
                    page.Header().Text("Reporte de Vacunación — Datos Ficticios").SemiBold().FontSize(20);
                    page.Content().Column(col =>
                    {
                        col.Item().Text($"Total ciudadanos: {total}");
                        col.Item().Text($"Pfizer: {pCount}");
                        col.Item().Text($"AstraZeneca: {aCount}");
                        col.Item().Text($"No vacunados: {noVacCount}");
                        col.Item().Text($"Ambas dosis (P ∩ A): {ambasCount}");
                        col.Item().Text($"Solo Pfizer (P - A): {soloPCount}");
                        col.Item().Text($"Solo AstraZeneca (A - P): {soloACount}");
                        col.Item().PaddingTop(10).Text("Notas:");
                        col.Item().Text("'Ambas dosis' se interpreta como intersección P ∩ A para fines del ejercicio.");
                    });
                    page.Footer().AlignCenter().Text($"Generado el {DateTime.Now:yyyy-MM-dd HH:mm}");
                });
            }).GeneratePdf(path);

            Console.WriteLine($"PDF generado: {path}");
        }
        */
    }
}
